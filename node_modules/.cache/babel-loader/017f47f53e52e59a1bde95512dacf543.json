{"ast":null,"code":"var _jsxFileName = \"/Users/jessspo/Desktop/wildcodeschool/week20/cosmic_star/cosmostar/src/context/MyProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\"; // import { useNavigate } from 'react-router-dom';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MyContext = /*#__PURE__*/React.createContext();\n\nconst MyProvider = props => {\n  _s();\n\n  //first for the create new card form, set-up the object that will be filled by the information filled in\n  const newCard = {\n    id: null,\n    image: \"\",\n    type: \"\",\n    first_name: \"\",\n    last_name: \"\",\n    title: \"\",\n    department: \"\",\n    company: \"\",\n    phone: 0,\n    email: \"\",\n    address: \"\",\n    website: \"\",\n    link: \"\",\n    pdf: \"\",\n    twitter: \"\",\n    instagram: \"\",\n    linkedin: \"\",\n    facebook: \"\",\n    youtube: \"\",\n    whatsapp: \"\",\n    documents: \"\",\n    files: \"\",\n    colour: \"\"\n  }; //Then create a state and set it to the empty object of newCard\n\n  let [crtCard, setCrtCard] = useState(newCard);\n\n  const handleCreateNewCardForm = event => {\n    const {\n      name,\n      value\n    } = event.currentTarget;\n    setCrtCard({ ...crtCard,\n      [name]: value\n    });\n  }; //Below will be the code for registering a new user\n  //First set-up an empty object that is ready to receive the information from the user\n\n\n  const blankUser = {\n    image_url: \"\",\n    first_name: \"\",\n    last_name: \"\",\n    email: \"\",\n    hash_password: \"\",\n    birthday: 0,\n    subscription: \"\",\n    date: 0\n  }; //Now set-up the state which is ready to receive the info\n\n  let [user, setUser] = useState(blankUser); //Then create the handler function to take the new information\n\n  const handleLogReg = event => {\n    const {\n      name,\n      value\n    } = event.currentTarget;\n    setUser({ ...user,\n      [name]: value\n    });\n  }; //Create the log in process\n  //A state to check the status of wether the user is logged in or not\n\n\n  let [loggedIn, SetLogIn] = useState(false);\n  let [userId, setUserID] = useState(null);\n  const contactBlank = {\n    image: \"\",\n    full_name: \"\",\n    title: \"\",\n    company: \"\",\n    email: \"\",\n    phone: 0,\n    website: \"\",\n    linkdin: \"\",\n    documents: \"\",\n    files: \"\",\n    add_date: null,\n    add_time: null,\n    contact_type: \"\",\n    tag1: \"\",\n    tag2: \"\",\n    tag3: \"\",\n    tag4: \"\",\n    notes: \"\",\n    users_id: null\n  };\n  let [contact, setContact] = useState(contactBlank);\n\n  const handleContact = event => {\n    const {\n      name,\n      value\n    } = event.currentTarget;\n    setContact({ ...contact,\n      [name]: value\n    });\n  };\n\n  let [editCard, setEditCard] = useState(false);\n  const orderPhysicalCardBlank = {\n    plan: \"\",\n    users_id: null\n  };\n  let [orderPhysicalCard, setPhysicalCard] = useState(orderPhysicalCardBlank);\n\n  const handleOrderPhysicalCard = event => {\n    const {\n      name,\n      value\n    } = event.currentTarget;\n    setPhysicalCard({ ...orderPhysicalCard,\n      [name]: value\n    });\n  }; // let cardOrderAddress = {\n  //   first_name: \"\",\n  //   last_name: \"\",\n  //   street_and_number: \"\",\n  //   city: \"\",\n  //   zip_code: \"\",\n  //   country: \"\",\n  //   phone_number: 0\n  // }\n  // let [ orderAddress, setOrderAddress ] = useState(cardOrderAddress);\n  // const handleOrderAddress = (event) => {\n  //   const { name, value } = event.currentTarget;\n  //   setOrderAddress({\n  //     ...orderAddress,\n  //     [name]: value, \n  // });\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(MyContext.Provider, {\n    value: {\n      newCard: newCard,\n      crtCard: crtCard,\n      setCrtCard: setCrtCard,\n      handleCreateNewCardForm: handleCreateNewCardForm,\n      blankUser: blankUser,\n      user: user,\n      setUser: setUser,\n      handleLogReg: handleLogReg,\n      SetLogIn: SetLogIn,\n      loggedIn: loggedIn,\n      userId: userId,\n      setUserID: setUserID,\n      contact: contact,\n      setContact: setContact,\n      handleContact: handleContact,\n      setEditCard: setEditCard,\n      editCard: editCard,\n      handleOrderPhysicalCard: handleOrderPhysicalCard\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MyProvider, \"6MOD4xTIsxooXPiCWBwncSBKBcI=\");\n\n_c = MyProvider;\nexport default MyProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyProvider\");","map":{"version":3,"names":["React","useState","MyContext","createContext","MyProvider","props","newCard","id","image","type","first_name","last_name","title","department","company","phone","email","address","website","link","pdf","twitter","instagram","linkedin","facebook","youtube","whatsapp","documents","files","colour","crtCard","setCrtCard","handleCreateNewCardForm","event","name","value","currentTarget","blankUser","image_url","hash_password","birthday","subscription","date","user","setUser","handleLogReg","loggedIn","SetLogIn","userId","setUserID","contactBlank","full_name","linkdin","add_date","add_time","contact_type","tag1","tag2","tag3","tag4","notes","users_id","contact","setContact","handleContact","editCard","setEditCard","orderPhysicalCardBlank","plan","orderPhysicalCard","setPhysicalCard","handleOrderPhysicalCard","children"],"sources":["/Users/jessspo/Desktop/wildcodeschool/week20/cosmic_star/cosmostar/src/context/MyProvider.js"],"sourcesContent":["import React, { useState } from \"react\";\n// import { useNavigate } from 'react-router-dom';\n\nexport const MyContext = React.createContext();\n\nconst MyProvider = (props) => {\n    //first for the create new card form, set-up the object that will be filled by the information filled in\n    const newCard = {\n      id: null,\n      image: \"\",\n      type: \"\",\n      first_name: \"\",\n      last_name: \"\",\n      title: \"\",\n      department: \"\",\n      company: \"\",\n      phone: 0,\n      email: \"\",\n      address: \"\",\n      website: \"\",\n      link: \"\",\n      pdf: \"\",\n      twitter: \"\",\n      instagram: \"\",\n      linkedin: \"\",\n      facebook: \"\",\n      youtube: \"\",\n      whatsapp: \"\",\n      documents: \"\",\n      files: \"\",\n      colour: \"\"\n    };\n    //Then create a state and set it to the empty object of newCard\n    let [crtCard, setCrtCard] = useState(newCard);\n\n  const handleCreateNewCardForm = (event) => {\n    const { name, value } = event.currentTarget;\n\n    setCrtCard({\n      ...crtCard,\n      [name]: value,\n    });\n  };\n\n  //Below will be the code for registering a new user\n  //First set-up an empty object that is ready to receive the information from the user\n  const blankUser = {\n    image_url: \"\",\n    first_name: \"\",\n    last_name: \"\",\n    email: \"\",\n    hash_password: \"\",\n    birthday: 0,\n    subscription: \"\",\n    date: 0,\n  };\n\n  //Now set-up the state which is ready to receive the info\n  let [user, setUser] = useState(blankUser);\n\n  //Then create the handler function to take the new information\n  const handleLogReg = (event) => {\n    const { name, value } = event.currentTarget;\n\n    setUser({\n      ...user,\n      [name]: value,\n    });\n  };\n\n  //Create the log in process\n\n  //A state to check the status of wether the user is logged in or not\n  let [loggedIn, SetLogIn] = useState(false);\n\n  let [userId, setUserID] = useState(null);\n\n  const contactBlank = {\n    image: \"\",\n    full_name: \"\",\n    title: \"\",\n    company: \"\",\n    email: \"\",\n    phone: 0,\n    website: \"\",\n    linkdin: \"\",\n    documents: \"\",\n    files: \"\",\n    add_date: null,\n    add_time: null,\n    contact_type: \"\",\n    tag1: \"\",\n    tag2: \"\",\n    tag3: \"\",\n    tag4: \"\",\n    notes: \"\",\n    users_id: null,\n  }\n\n  let [contact, setContact] = useState(contactBlank);\n\n  const handleContact = (event) => {\n    const { name, value } = event.currentTarget;\n\n    setContact({\n    ...contact,\n    [name]: value,\n  });\n  };\n\n  let [ editCard, setEditCard ] = useState(false);\n\n  const orderPhysicalCardBlank = {\n    plan: \"\",\n    users_id: null,\n  };\n\n  let [ orderPhysicalCard, setPhysicalCard ] = useState(orderPhysicalCardBlank);\n\n  const handleOrderPhysicalCard = (event) => {\n    const { name, value } = event.currentTarget;\n\n    setPhysicalCard({\n      ...orderPhysicalCard,\n      [name]: value, \n    });\n  };\n\n  // let cardOrderAddress = {\n  //   first_name: \"\",\n  //   last_name: \"\",\n  //   street_and_number: \"\",\n  //   city: \"\",\n  //   zip_code: \"\",\n  //   country: \"\",\n  //   phone_number: 0\n  // }\n\n  // let [ orderAddress, setOrderAddress ] = useState(cardOrderAddress);\n\n  // const handleOrderAddress = (event) => {\n  //   const { name, value } = event.currentTarget;\n\n  //   setOrderAddress({\n  //     ...orderAddress,\n  //     [name]: value, \n  // });\n  // };\n    \n    return (\n        <MyContext.Provider \n            value={{\n                newCard: newCard,\n                crtCard: crtCard,\n                setCrtCard: setCrtCard,\n                handleCreateNewCardForm: handleCreateNewCardForm,\n                blankUser: blankUser,\n                user: user,\n                setUser: setUser,\n                handleLogReg: handleLogReg,\n                SetLogIn: SetLogIn,\n                loggedIn: loggedIn,\n                userId: userId,\n                setUserID: setUserID,\n                contact: contact,\n                setContact: setContact,\n                handleContact: handleContact,\n                setEditCard: setEditCard,\n                editCard: editCard,\n                handleOrderPhysicalCard: handleOrderPhysicalCard\n            }} >\n                { props.children }\n        </MyContext.Provider> \n    )\n};\n\nexport default MyProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}